syntax = "proto3";

option java_package = "io.coded.seabird.chat_ingest";
option go_package = ".;pb";

import "common.proto";

package seabird;

// HelloChatEvent MUST be the first event sent by the chat backend. If a
// different event is sent, the connection will be closed. The chat backend MUST
// provide an ID unique between all running instances of this type in the
// backend_info. If the ID is not provided or is not unique, the connection will
// be closed.
//
// Note that all IDs sent by a chat backend will be automatically namespaced by
// core based on the backend. As an example, a backend of type "foo" and an ID
// of "bar" may show up as something like "foo.bar" to plugins.
message HelloChatEvent {
  common.Backend backend_info = 1;
}

// JoinChannelEvent will be sent when a user joins a channel. The topic SHOULD
// be included if possible, but it can be sent in a topic update event later.
message JoinChannelChatEvent {
  string channel_id = 1;
  string display_name = 2;
  string topic = 3;
}

// LeaveChannelEvent will be sent when a user leaves a channel.
message LeaveChannelChatEvent {
  string channel_id = 1;
}

// ChangeChannelEvent will occur when a channel's display name or topic is
// updated.
message ChangeChannelChatEvent {
  string channel_id = 1;
  string display_name = 2;
  string topic = 3;
}

// ChatEvent contains all the different event types a chat backend can emit.
// Note that these are slightly different to the seabird.Event types as channels
// here will not be mapped to UUIDs and some events are only to support the data
// that seabird-core tracks.
//
// HelloChatEvent is the only message type that is required for a chat backend
// to work.
message ChatEvent {
  reserved 3, 4, 14;

  string id = 1;

  oneof inner {
    // Seabird-internal event types
    HelloChatEvent hello = 2;

    // Messages from the service
    common.MessageEvent message = 5;
    common.PrivateMessageEvent private_message = 6;
    common.MentionEvent mention = 7;
    common.CommandEvent command = 8;
    common.ActionEvent action = 12;
    common.PrivateActionEvent private_action = 13;

    // Channel changes
    JoinChannelChatEvent join_channel = 9;
    LeaveChannelChatyeahEvent leave_channel = 10;
    ChangeChannelChatEvent change_channel = 11;
  }
}

message IngestEventsResponse {}

// This service is exposed separately to the chat frontend. Its purpose is to
// allow multiple different chat backends to register to Core and allow plugins
// to communicate with them.
service ChatIngest {
  rpc IngestEvents(stream ChatEvent) returns (IngestEventsResponse);
}
