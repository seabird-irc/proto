syntax = "proto3";

option java_package = "io.coded.seabird.common";
option go_package = ".;pb";

package common;

// All IDs come in two forms - relative and absolute. Relative IDs are sent only
// by chat backends, while Absolute IDs will only be seen by plugins. A backend
// will only see relative IDs, plugins will only see absolute IDs.
//
// Relative IDs are a string of any characters which can be properly urlencoded.
//
// Absolute IDs are a URL with the following parts representing different
// things:
// - Scheme refers to the backend type (irc, discord, etc)
// - Host refers to the ID of the backend
// - Path refers to the relative ID of this item. Note that this MUST be
//   properly urlencoded as it can contain characters which would cause it to
//   parse differently, such as `#`, often used by the IRC backend to represent
//   channels.
//
// An absolute ID MUST be unique among all items in that set, but they do not
// need to be unique globally.

// When sent by a chat backend, the ID MAY optionally be used as a hint to the
// frontend to get the same external ID on reconnection. When sent by core to a
// plugin, the ID MUST be an ID pointing to an exact backend instance.
message Backend {
  string id = 1;
  string type = 2;
  string callback_url = 3;
}

// When sent by a chat backend, the ID MUST be unique across users in that running
// backend. Failure to follow this will result in incorrect information being
// sent to plugins. When sent by core to a plugin, the ID MUST be an ID pointing
// to an instance of a user on chat backend.
message User {
  string id = 1;
  string display_name = 2;
}

// When sent by a chat backend, the ID MUST be unique across channels in that
// running backend. Failure to follow this will result in incorrect information
// being sent to plugins. When sent by core to a plugin, the ID MUST be an ID
// pointing to an instance of a channel on chat backend.
message Channel {
  string id = 1;
  string display_name = 2;
  string topic = 3;
}

// ChannelSource represents where a message came from. Note that User is used
// rather than just an ID so any clients can have access to the name as well.
// This may change in the future.
message ChannelSource {
  string channel_id = 1;
  User user = 2;
}

// Common Events

// MessageEvent will be sent when a user sends a message to a channel.
message MessageEvent {
  ChannelSource source = 1;
  string text = 2;
}

// PrivateMessageEvent will be sent when a user sends a message directly to the
// chat backend.
message PrivateMessageEvent {
  common.User source = 1;
  string text = 2;
}

// MentionEvent will be sent when a user mentions the chat backend's user at the
// start of a message in a channel. Note that this may eventually go away when a
// more general message format is developed.
message MentionEvent {
  ChannelSource source = 1;
  string text = 2;
}

// CommandEvent will be sent when a user issues a command in a channel. Commands
// cannot be issued via private message. If a message is parsed as a command, it
// MUST NOT be also sent as another message type.
message CommandEvent {
  ChannelSource source = 1;
  string command = 2;
  string arg = 3;
}

// ActionEvent will be sent when a user takes an action in a channel. This is
// often triggered with /me.
message ActionEvent {
  ChannelSource source = 1;
  string text = 2;
}

// PrivateActionEvent will be sent when a user takes an action in a private
// message. This is often triggered with /me.
message PrivateActionEvent {
  common.User source = 1;
  string text = 2;
}

// Actions which can be performed via RPC. These are used in both core's
// interface and the chat backend interface.

// PerformActionRequest is often known as /me. Either an error or
// PerformActionResponse will be returned.
message PerformActionRequest {
  string channel_id = 1;
  string text = 2;
}

message PerformActionResponse {}

// PerformPrivateActionRequest is often known as /me. Either an error or
// PerformPrivateActionResponse will be returned.
message PerformPrivateActionRequest {
  string user_id = 1;
  string text = 2;
}

message PerformPrivateActionResponse {}

// SendMessageRequest requests for a message to be sent to a given channel.
// Either an error or SendMessageResponse will be returned.
message SendMessageRequest {
  string channel_id = 1;
  string text = 2;
}

message SendMessageResponse {}

// SendPrivateMessageRequest requests for a message to be sent to a given
// user. Either an error or SendPrivateMessageResponse will be returned.
message SendPrivateMessageRequest {
  string user_id = 1;
  string text = 2;
}

message SendPrivateMessageResponse {}

// JoinChannelRequest requests for the bot to join the channel with the
// given name. Either an error or JoinChannelResponse will be returned.
message JoinChannelRequest {
  string backend_id = 1;

  // NOTE: this channel_name is the only place name is used for an identifier -
  // all other times channels will be referred to by ID.
  string channel_name = 2;
}

message JoinChannelResponse {}

// LeaveChannelRequest requests for the bot to leave the channel with the
// given ID. Either an error or LeaveChannelResponse will be returned.
message LeaveChannelRequest {
  string channel_id = 1;
  string exit_message = 2;
}

message LeaveChannelResponse {}

// UpdateChannelInfoRequest requests for a the channel to be updated with the
// given metadata. Either an error or UpdateChannelInfoResponse will be returned.
message UpdateChannelInfoRequest {
  string channel_id = 1;
  string topic = 2;
}

message UpdateChannelInfoResponse {}
